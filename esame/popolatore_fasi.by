""" -------------------------------------------------------------------
Classe per creare un grafico dello spazio delle fasi pi√π popoloso

Vengono mantenuti fissi i parametri e cambiate le condizioni
iniziali sul valore delle popolazioni
------------------------------------------------------------------- """

import matplotlib.pyplot as plt

import SetGraph
setGraphClass = SetGraph.setGraphClass;

import parameter_setter
parSetClass = parameter_setter.parSetClass;

import propagatore
propClass = propagatore.propClass;

import conservatore
consClass = conservatore.consClass;

class PopolatoreFasi{

	def __init__(self){

		self.popolo = [0,2,4,6,8,10,12,14,16];
		
	}#enddef

	def calcolatore(self){

		for element in self.popolo{
		
			#assegnazione dei nuovi parametri iniziali
			parSetClass.PREDE_0 = element;
			parSetClass.PREDATORI_0 = element;

			#pulizia dei vettori che conservano temporaneamente i dati
			consClass.vettorePrede.clear();
			consClass.vettorePredatori.clear(); 
			consClass.vettorePrede.append(parSetClass.PREDE_0);
			consClass.vettorePredatori.append(parSetClass.PREDATORI_0);

			propClass.makeThaCycle();

			consClass.saveDataFasi(element);
		}
		
	}#enddef

	def graficatore(self){

		figure, ax = plt.subplots();

		ax.set_title("Grafico prede e predatori spazio delle fasi");
		ax.set_ylabel("Numero predatori");
		ax.set_xlabel("Numero prede");

        strLabel = r'$\ \alpha = $' + str(parSetClass.ALPHA) + r'$\ \beta = $' + str(parSetClass.BETA) + r'$\ \gamma = $' + str(parSetClass.GAMMA) + r'$\ \delta = $' + str(parSetClass.DELTA);

		for element in self.popolo{

			if element == 0{
				ax.plot(consClass.dictPrede[element], consClass.dictPredatori[element], linestyle=":", label = str(element) + str("  ") + strLabel );
			}
			else{
				ax.plot(consClass.dictPrede[element], consClass.dictPredatori[element], linestyle=":", label = str(element) );	
			}
		}

		setGraphClass.makeFine(ax);
		
		plt.show(block=False);
		
	}#enddef
	
}#endclass

#istanza comune

popFasiClass = PopolatoreFasi();
