""" -----------------------------------------------------
Classe per il calcolo degli autovalori e autovettori
----------------------------------------------------- """
import numpy as np
import scipy

import conservatore
import potential_calculator

data = conservatore.data;
potentialClass = potential_calculator.potentialClass;
class Autovaloratore{

	def __init__(self){
#		self.M = np.zeros( (data.par_numeroPunti-2, data.par_numeroPunti-2) );

		#l'equazione associta al problema presenta coefficienti costanti
		self.adix = -0.5;
#		self.bdix = 0;
		self.cdix = 0;

		#sono costanti anche gli elementi di matrice L,U
		self.Ldix = self.adix / data.par_larghezzaIntervallo**2 ;
		self.Ddix = 0;
		self.Udix = self.adix / data.par_larghezzaIntervallo**2 ;

		self.MainDiagonale = [];
		self.SubDiagonale = [];

		self.debugFlag = False;		
	}#enddef
	

	def setD(self){
		dummy1 = -2*self.adix / data.par_larghezzaIntervallo**2
		self.Ddix = dummy1 + self.cdix;
	}#enddef


#	def matrixBuilder(self, i){
	#considerando le notazioni utilizzate si screano non pochi problemi con gli indici
	#si passa da una matrice definita con indici che vanno da 1 a N 
	#per arrivare ad una che parte da 0 fino a n-2
	#questo spostamento di indici Ã¨ implicito dato che il primo e l'ultimo punto del potenziale non sono presenti
#		if( i == 0){
#			self.M[0,0] = self.Ddix;
#			self.M[0,1] = self.Udix;
#		}
#		else if( i == data.par_numeroPunti-3){
#			self.M[data.par_numeroPunti-3,data.par_numeroPunti-3] = self.Ddix;
#			self.M[data.par_numeroPunti-3,data.par_numeroPunti-4] = self.Ldix;
#		}
#		else{
#			self.M[i,i]   = self.Ddix;
#			self.M[i,i+1] = self.Udix;
#			self.M[i,i-1] = self.Ldix;
#		}
#	}#enddef


	def autoCalculator(self){

		data.makeDictionaries();

#		if(self.debugFlag){
#			print("Dimensione matrice:  ", self.M.shape);
#			print(self.M);
#		}

		if( data.par_potentialSelector == "z"){

			potentialClass.calcZero();

			for l in range(data.par_lquanticoMax+1){
				for r in range(data.par_numeroPunti-2){
					self.cdix = data.potenzialeZero[r] + ( 0.5*l*(l+1) / data.vettoreGriglia[r+1] );
					self.setD();
					self.MainDiagonale.append( self.Ddix );
					self.SubDiagonale.append( self.Ldix );	
				}
				aval, avec = scipy.linalg.eigh_tridiagonal(self.MainDiagonale, self.SubDiagonale[1:], check_finite=False );
				data.ListdictAVzero[l]["autov"] = aval;
				data.ListdictAVzero[l]["autof"] = avec;

				self.MainDiagonale = [];
				self.SubDiagonale = [];
			}
		}
		if( data.par_potentialSelector == "c"){

			potentialClass.calcCoulomb();

			for l in range(data.par_lquanticoMax+1){
				for r in range(data.par_numeroPunti-2){
					self.cdix = data.potenzialeCoulomb[r] + ( 0.5*l*(l+1) / data.vettoreGriglia[r+1] );
					self.setD();
					self.MainDiagonale.append( self.Ddix );
					self.SubDiagonale.append( self.Ldix );	
				}
				aval, avec = scipy.linalg.eigh_tridiagonal(self.MainDiagonale, self.SubDiagonale[1:], check_finite=False);
				data.ListdictAVcoulomb[l]["autov"] = aval;
				data.ListdictAVcoulomb[l]["autof"] = avec;
				self.MainDiagonale = [];
				self.SubDiagonale = [];
			}	
		}
		if( data.par_potentialSelector == "y"){

			potentialClass.calcYukawa();

			for l in range(data.par_lquanticoMax+1){
				for gamma in data.par_gammaY{
					for r in range(data.par_numeroPunti-2){
						self.cdix = data.dictPotenzialeYukawa[str(gamma)][r] + ( 0.5*l*(l+1) / data.vettoreGriglia[r+1] );
						self.setD();
						self.MainDiagonale.append( self.Ddix );
						self.SubDiagonale.append( self.Ldix );	
					}
					aval, avec = scipy.linalg.eigh_tridiagonal(self.MainDiagonale, self.SubDiagonale[1:], check_finite=False);
					dictKey = "autov" + str(gamma);
					data.ListdictAVyukawa[l][dictKey] = aval;
					dictKey = "autof" + str(gamma);
					data.ListdictAVyukawa[l][dictKey] = avec;

					self.MainDiagonale = [];
					self.SubDiagonale = [];										
				}
			}
		}
		
	}#enddef
	
	
}#endclass
