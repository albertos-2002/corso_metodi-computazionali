""" -------------------------------------------------------

------------------------------------------------------- """
import sys
sys.path.append("../util/")

import conservatore
data = conservatore.data;
import SetGraph
sg = SetGraph.SetGraph();

import matplotlib.pyplot as plt
import numpy as np

class DataPlotter{

	def __init__(self){
		self.figureList = [];
		self.axList = [];
		self.EfigureList = [];
		self.EaxList = [];
	}#enddef
	

	def plotAutoFunc(self){

		for _ in range(data.par_lquanticoMax+1){

			if(data.par_potentialSelector == "y"){
				figure, ax = plt.subplots(1,3);
				self.figureList.append(figure);
				self.axList.append(ax);
			}
			else{
				figure, ax = plt.subplots();
				self.figureList.append(figure);
				self.axList.append(ax);	
			}
		}

		if(data.par_potentialSelector == "z"){

			for l in range(data.par_lquanticoMax+1){
				self.axList[l].set_title( "Potenziale zero (z), l = " + str(l) );
                self.axList[l].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l].set_xlabel( "Unità di raggio di Bohr" );

				for k in range(data.par_nAutofunzioniPlot){
					autovector = data.ListdictAVzero[l]["autof"][k];
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );
				}
				sg.makeFine( self.axList[l] );
			}
		}
		if(data.par_potentialSelector == "c"){

			for l in range(data.par_lquanticoMax+1){
				self.axList[l].set_title( "Potenziale Coulomb (c), l = " + str(l) );
                self.axList[l].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l].set_xlabel( "Unità di raggio di Bohr" );
				
				for k in range(data.par_nAutofunzioniPlot){
					autovector = data.ListdictAVcoulomb[l]["autof"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) )
				}
				sg.makeFine( self.axList[l] );
			}
		}
		if(data.par_potentialSelector == "y"){

			sg.setStyle();

			for l in range(data.par_lquanticoMax+1){
                self.axList[l][0].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 1" );
                self.axList[l][0].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][0].set_xlabel( "Unità di raggio di Bohr" );

                self.axList[l][1].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 2" );
                self.axList[l][1].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][1].set_xlabel( "Unità di raggio di Bohr" );

                self.axList[l][2].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 5" );
                self.axList[l][2].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][2].set_xlabel( "Unità di raggio di Bohr" );
								
				for k in range(data.par_nAutofunzioniPlot){
				
					autovector = data.ListdictAVyukawa[l]["autof1"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][0].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );

					autovector = data.ListdictAVyukawa[l]["autof2"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][1].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );

					autovector = data.ListdictAVyukawa[l]["autof5"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][2].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );
				}
				sg.makeFine( self.axList[l][0] );
				sg.makeFine( self.axList[l][1] );
				sg.makeFine( self.axList[l][2] );

				self.figureList[l].suptitle("l = " + str(l));
			}
		}
		
	}#enddef

	def plotAutoEner(self){

		for _ in range(data.par_lquanticoMax+1){

			if(data.par_potentialSelector == "y"){
				figure, ax = plt.subplots(1,3);
				self.EfigureList.append(figure);
				self.EaxList.append(ax);
			}
			else{
				figure, ax = plt.subplots();
				self.EfigureList.append(figure);
				self.EaxList.append(ax);	
			}
		}


		if(data.par_potentialSelector == "z"){

			for l in range(data.par_lquanticoMax+1){
				self.EaxList[l].set_title( "Potenziale zero (z), l = " + str(l) );
                self.EaxList[l].set_ylabel( "Autoenergia" );
                self.EaxList[l].set_xlabel( "Indice" );

				dummy = data.ListdictAVzero[l]["autov"];
                self.EaxList[l].plot( range(len(dummy)), dummy, label="autoenergia", linestyle=":", marker=".");
				sg.makeFine( self.EaxList[l] );
			}
		}
		if(data.par_potentialSelector == "c"){
			pass
		}
		if(data.par_potentialSelector == "y"){
			pass
		}
		
	}#enddef

	def plotData(self){
		self.plotAutoFunc();		
		self.plotAutoEner();
	}#enddef
	
}#endclass
