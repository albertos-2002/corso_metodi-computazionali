""" -------------------------------------------------------

------------------------------------------------------- """
import sys
sys.path.append("../util/")

import conservatore
data = conservatore.data;
import SetGraph
sg = SetGraph.SetGraph();

import matplotlib.pyplot as plt
import numpy as np

class DataPlotter{

	def __init__(self){
		self.figureList = [];
		self.axList = [];
		self.EfigureList = [];
		self.EaxList = [];
		self.VfigureList = [];
		self.VaxList = [];
		self.RfigureList = [];
		self.RaxList = [];		
	}#enddef
	

	def plotAutoFunc(self){

		for _ in range(data.par_lquanticoMax+1){

			if(data.par_potentialSelector == "y"){
				figure, ax = plt.subplots(1,3);
				self.figureList.append(figure);
				self.axList.append(ax);
			}
			else{
				figure, ax = plt.subplots();
				self.figureList.append(figure);
				self.axList.append(ax);	
			}
		}

		if(data.par_potentialSelector == "z"){

			for l in range(data.par_lquanticoMax+1){
				self.axList[l].set_title( "Potenziale zero (z), l = " + str(l) );
                self.axList[l].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l].set_xlabel( "Unità di raggio di Bohr" );

				for k in range(data.par_nAutofunzioniPlot){
					autovector = data.ListdictAVzero[l]["autof"][k];
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );
				}
				sg.makeFine( self.axList[l] );
			}
		}
		if(data.par_potentialSelector == "c"){

			for l in range(data.par_lquanticoMax+1){
				self.axList[l].set_title( "Potenziale Coulomb (c), l = " + str(l) );
                self.axList[l].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l].set_xlabel( "Unità di raggio di Bohr" );
				
				for k in range(data.par_nAutofunzioniPlot){
					autovector = data.ListdictAVcoulomb[l]["autof"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) )
				}
				sg.makeFine( self.axList[l] );
			}
		}
		if(data.par_potentialSelector == "y"){

			sg.setStyle();

			for l in range(data.par_lquanticoMax+1){
                self.axList[l][0].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 1" );
                self.axList[l][0].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][0].set_xlabel( "Unità di raggio di Bohr" );

                self.axList[l][1].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 2" );
                self.axList[l][1].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][1].set_xlabel( "Unità di raggio di Bohr" );

                self.axList[l][2].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 5" );
                self.axList[l][2].set_ylabel( "Modulo quadro di " + r"$\psi$" );
                self.axList[l][2].set_xlabel( "Unità di raggio di Bohr" );
								
				for k in range(data.par_nAutofunzioniPlot){
				
					autovector = data.ListdictAVyukawa[l]["autof1"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][0].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );

					autovector = data.ListdictAVyukawa[l]["autof2"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][1].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );

					autovector = data.ListdictAVyukawa[l]["autof5"][k]
					dummy = np.concatenate(( [0], autovector**2, [0] ));
					self.axList[l][2].plot( data.vettoreGriglia, dummy, label="autofunzione " + str(k) );
				}
				sg.makeFine( self.axList[l][0] );
				sg.makeFine( self.axList[l][1] );
				sg.makeFine( self.axList[l][2] );

				self.figureList[l].suptitle("l = " + str(l));
			}
		}
		
	}#enddef

	def plotAutoEner(self){

		for _ in range(data.par_lquanticoMax+1){

			if(data.par_potentialSelector == "y"){
				figure, ax = plt.subplots(1,3);
				self.EfigureList.append(figure);
				self.EaxList.append(ax);
			}
			else{
				figure, ax = plt.subplots();
				self.EfigureList.append(figure);
				self.EaxList.append(ax);	
			}
		}


		if(data.par_potentialSelector == "z"){

			for l in range(data.par_lquanticoMax+1){
				self.EaxList[l].set_title( "Potenziale zero (z), l = " + str(l) );
                self.EaxList[l].set_ylabel( "Autoenergia" + r"$[Hr]$" );
                self.EaxList[l].set_xlabel( "Indice" );

				dummy = data.ListdictAVzero[l]["autov"];
                self.EaxList[l].plot( range(len(dummy)), dummy, label="autoenergia", linestyle=":", marker=".");
				sg.makeFine( self.EaxList[l] );
			}
		}
		if(data.par_potentialSelector == "c"){

			for l in range(data.par_lquanticoMax+1){
				self.EaxList[l].set_title( "Potenziale Coulomb (c), l = " + str(l) );
                self.EaxList[l].set_ylabel( "Autoenergia" + r"$[Hr]$" );
                self.EaxList[l].set_xlabel( "Indice" );

				dummy = data.ListdictAVcoulomb[l]["autov"];
                self.EaxList[l].plot( range(len(dummy)), dummy, label="autoenergia", linestyle=":", marker=".");
				sg.makeFine( self.EaxList[l] );                
			}
		}		
		if(data.par_potentialSelector == "y"){

			sg.setStyle();

			for l in range(data.par_lquanticoMax+1){
                self.EaxList[l][0].set_title( "Potenziale Yukawa (y) " + r"$\gamma$ = 1" );
                self.EaxList[l][0].set_ylabel( "Autoenergia" + r"$[Hr]$" );
                self.EaxList[l][0].set_xlabel( "Indice" );

                self.EaxList[l][1].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 2" );
                self.EaxList[l][1].set_ylabel( "Autoenergia" + r"$[Hr]$" );
                self.EaxList[l][1].set_xlabel( "Indice" );

                self.EaxList[l][2].set_title( "Potenziale Yukawa (y), " + r"$\gamma$ = 5" );
                self.EaxList[l][2].set_ylabel( "Autoenergia" + r"$[Hr]$" );
                self.EaxList[l][2].set_xlabel( "Indice" );
								
				dummy = data.ListdictAVyukawa[l]["autov1"]
				self.EaxList[l][0].plot( range(len(dummy)), dummy, label="autoenergia");
					
				dummy = data.ListdictAVyukawa[l]["autov2"]
				self.EaxList[l][1].plot( range(len(dummy)), dummy, label="autoenergia");
				
				dummy = data.ListdictAVyukawa[l]["autov5"]
				self.EaxList[l][2].plot( range(len(dummy)), dummy, label="autoenergia");
				
				sg.makeFine( self.EaxList[l][0] );
				sg.makeFine( self.EaxList[l][1] );
				sg.makeFine( self.EaxList[l][2] );

				self.EfigureList[l].suptitle("l = " + str(l));
			}
		}
		
	}#enddef

	def verificaBessel(self){

		dummyL = data.par_lquanticoMax
		if(dummyL > 4){
			dummyL = 4;
		}

		for _ in range(dummyL+1){
			figure, ax = plt.subplots();
			self.VfigureList.append(figure);
			self.VaxList.append(ax);
		}

		constB = 1 / (2 * data.par_larghezzaBuca**2);
	
		bessel0 = constB * np.asarray( [3.141593, 6.283185, 9.424778, 12.566371, 15.707963] )**2;
		bessel1 = constB * np.asarray( [4.493409, 7.725252, 10.904122, 14.066194, 17.220755] )**2;
		bessel2 = constB * np.asarray( [5.763459, 9.095011, 12.322941, 15.514603, 18.689036] )**2;
		bessel3 = constB * np.asarray( [6.987932, 10.417119, 13.698023, 16.923621, 20.121806] )**2;
		bessel4 = constB * np.asarray( [8.182561, 11.704907, 15.039665, 18.301256, 21.525418] )**2;

		besselArray = [bessel0, bessel1, bessel2, bessel3, bessel4];

		for l in range(dummyL+1){
			self.VaxList[l].set_title( "Verifica andamento autoenergie, l = " + str(l) );
            self.VaxList[l].set_ylabel( "Autoenergia" + r"$[Hr]$" );
            self.VaxList[l].set_xlabel( "Indice" );

			dummy = data.ListdictAVzero[l]["autov"];
            self.VaxList[l].plot( range(len(dummy[:5])), dummy[:5], label="autoenergia calcolata", linestyle=":", marker=".");
            self.VaxList[l].plot( range(len(dummy[:5])), besselArray[l], label="autoenergia teorica", linestyle=":", marker=".");
			sg.makeFine( self.VaxList[l] );
		}
		
	}#enddef

	def autofRadiali(self){

		for _ in range(data.par_lquanticoMax+1){
			figure, ax = plt.subplots();
			self.RfigureList.append(figure);
			self.RaxList.append(ax);	
		}

		for l in range(data.par_lquanticoMax+1){
			self.RaxList[l].set_title( "Potenziale zero (z), l = " + str(l) );
            self.RaxList[l].set_ylabel( "Parte radiale autofunzione" );
            self.RaxList[l].set_xlabel( "Unità di raggio di Bohr" );

			for k in range(data.par_nAutofunzioniPlot){
				autovector = data.ListdictAVzero[l]["autof"][k];
				dummy = np.concatenate(( [0], autovector, [0] ));
				self.RaxList[l].plot( data.vettoreGriglia, dummy*data.vettoreGriglia, label="parte radiale " + str(k) );
			}
			sg.makeFine( self.RaxList[l] );
		}	
	}#enddef

	def plotData(self){
	
		self.plotAutoFunc();
		plt.show(block=False);
		print(" Premete Enter per chiudere i grafici e passare ai successivi")
		input();
		plt.close("all");		
		
		self.plotAutoEner();
		plt.show(block=False);
		print(" Premete Enter per chiudere i grafici e passare ai successivi")
		input();
		plt.close("all");

		if(data.par_potentialSelector == "z"){
			self.verificaBessel();
			plt.show(block=False);
			print(" Premete Enter per chiudere i grafici e passare ai successivi")
			input();
			plt.close("all");

			self.autofRadiali();
			plt.show(block=False);
			print(" Premete Enter per chiudere i grafici e passare ai successivi")
			input();
			plt.close("all");
		}
	}#enddef
	
}#endclass
