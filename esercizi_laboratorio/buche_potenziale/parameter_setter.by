""" --------------------------------------------
Classe per il setting dei parametri
-------------------------------------------- """
import conservatore

data = conservatore.data;
class ParameterSetter{

	def __init__(self){
		self.NumeroPunti = 100; #valore consigliato
		self.LarghezzaBuca = 10; #espresso in unità di raggio di bohr
		self.lquanticoMax = 2;
		self.potenzialeFlag = None;
		self.nAutofunzioni = 0;
	}#enddef

	def parameterSetter(self){

		print(" Inserire nella prossima sezione i parametri:");
		
		print(" > Inserire il numero di punti per la griglia:")
		print("   (consigliato 100)")
		print("   (per confronto atomo idrogeno servono n grandi)")
		self.NumeroPunti = int( input("\t") );
		
		print(" > Inserire la larghezza della buca in unità di raggio di Bohr:")
		print("   (consigliato 10)")
		self.LarghezzaBuca = int( input("\t") );

		print(" > Inserire il valore massimo del numero quantico l:");
		self.lquanticoMax = int( input("\t") );

		print(" > Selezionare il potenziale da utilizzare:");
		print("   z : potenziale nullo");
		print("   c : potenziale di Coulomb");
		print("   y : potenziale di Yukawa");
		self.potenzialeFlag = str( input("\t") );

		print(" > Inserire il numero di autofunzioni da plottare:");
		self.nAutofunzioni = int( input("\t") );
		

		#inseriamo i dati nella classe conservatore
		data.par_numeroPunti = self.NumeroPunti;
		data.par_larghezzaBuca = self.LarghezzaBuca;
		data.par_lquanticoMax = self.lquanticoMax;
		data.par_potentialSelector = self.potenzialeFlag;
		data.par_nAutofunzioniPlot = self.nAutofunzioni;

		data.setParametriDerivati();
	}#enddef
	
}#endclass
