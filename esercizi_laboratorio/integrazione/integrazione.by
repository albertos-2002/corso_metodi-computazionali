""" -------------------------------------------------------
Esercizio:
integrazione di e^x tra 0 e 1 (risulstato e-1) con:
- rettangoli naif
- rettangoli
- trapezi
- simpson
variare N 
graficare errore in scala bilogaritmica
ax.semilogx()
ax.semilogy()
------------------------------------------------------- """

import sys 
sys.path.append("../util/");
#------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

import set_graph as sg

#global -----------------------------------------------------------
OrdiniDivisione = [];

risultatoEsatto = np.e -1;
estremoInferiore = 0;
estremoSuperiore = 1;

#conserviamo i risultati in una lista ordinata come gli ordini di divisione
risultatiRettangoliNaif = [];
risultatiRettangoli     = [];
risultatiTrapezi        = [];
risultatiSimpson        = [];

errRettangoliNaif = [];
errRettangoli     = [];
errTrapezi        = [];
errSimpson        = [];  

# ------------------------------------------
numeroEsponenti = int( input("numero ordini di grandezza (10**) del numero di intervalli: \n") );
for ordine in range(1, numeroEsponenti+1, 1){
	OrdiniDivisione.append( 10**ordine );
}

for numeroPunti in OrdiniDivisione {

	#creazione della griglia di punti
	puntiGriglia = np.linspace( estremoInferiore, estremoSuperiore, numeroPunti+1 );
	step = puntiGriglia[1]-puntiGriglia[0];
	"""
	Creiamo in questo modo una griglia equispaziata di 
	N+1 punti (indici da 0 a N)
	che suddivide l'intervallo di integrazione in N intervallini
	"""
	
	
	# RETTANGOLI NAIF ----------------------------------------------------------------------------------------------------------------
	#considera come valore di f in h l'estremo sinistro
	"""
	len(puntiGriglia) non misura il numero di intervalli ma il numero di punti
	che è N+1 (si considera anche il punto di indice zero)
	per usare la notazione degli intervalli (primo punto x_0) usiamo la funzione range
	dato che il punto di stop non è incluso
	quindi inserendo nella funzione range (len(...) - 1) = ( N +1 -1) = N
	quindi ci fermiano al punto N-1 (incluso) nella notazione degli intervalli  
	"""
	sommaRettangoliNaif = 0;
	for index in range( len(puntiGriglia)-1 ){
		valoreFunzione = np.exp( puntiGriglia[index] );
		sommaRettangoliNaif += valoreFunzione;
	}
	sommaRettangoliNaif *= step;
	
	risultatiRettangoliNaif.append( sommaRettangoliNaif );
	errRettangoliNaif.append( abs(risultatoEsatto - sommaRettangoliNaif) );
	
	# RETTANGOLI ---------------------------------------------------------------------------------------------------------------------
	#consideriamo il valore centrale dell' intervallo h
	sommaRettangoli = 0;
	for index in range( len(puntiGriglia)-1 ){
		valoreEsponente = ( puntiGriglia[index+1] + puntiGriglia[index] ) /2;
		valoreFunzione = np.exp( valoreEsponente );
		sommaRettangoli += valoreFunzione;
	}
	sommaRettangoli *= step;
	
	risultatiRettangoli.append( sommaRettangoli );
	errRettangoli.append( abs(risultatoEsatto - sommaRettangoli) );
	
	# TRAPEZI ------------------------------------------------------------------------------------------------------------------------
	#consideriamo la retta che passa per i due estremi dell'intervallo h
	sommaTrapezi = 0;
	for index in range( len(puntiGriglia)-1 ){
		valoreFunzione_1 = np.exp( puntiGriglia[index] );
		valoreFunzione_2 = np.exp( puntiGriglia[index+1] );
		sommaTrapezi += (valoreFunzione_1 + valoreFunzione_2) / 2;
	}
	sommaTrapezi *= step;
	
	risultatiTrapezi.append( sommaTrapezi );
	errTrapezi.append( abs(risultatoEsatto - sommaTrapezi) );
	
	# SIMPSON ------------------------------------------------------------------------------------------------------------------------
	#consideriamo un polinomio di ordine 2 in un intervallo 2h
	#Il numero di intervalli, perchè simpson funzioni, deve essere pari
	# non è stato inserito un controllo, in quanto lo sono per costruzione

	sommaSimpson = 0;
	for index in range( 1, len(puntiGriglia)-1 ){

		if index % 2 == 0 { #punti di indice pari
			sommaSimpson += ( (2/3) * np.exp( puntiGriglia[index] ) );
		}
		else { #restanti punti di indice dispari
			sommaSimpson += ( (4/3) * np.exp( puntiGriglia[index] ) );
		}
	}

	#punti di bordo
	sommaSimpson += ( (1/3) * np.exp( puntiGriglia[0] ) );
	sommaSimpson += ( (1/3) * np.exp( puntiGriglia[-1] ) );
	sommaSimpson *= step;
		
	risultatiSimpson.append( sommaSimpson );
	errSimpson.append( abs(risultatoEsatto - sommaSimpson) );

}

# GRAFICA -------------------------------------------------------------------------------------------------------------------------

figure , ax = plt.subplots();
sg.set_style(fontSize=19, markerSize=10);

ax.set_title("Grafico errore (log)");
ax.set_ylabel("$|\\ valoreEsatto - valoreCalcolato\\ |$");
ax.set_xlabel("Ordini di grandezza");
ax.semilogy();
ax.semilogx();
ax.plot( OrdiniDivisione, errRettangoliNaif, marker="x", linestyle=":", label=r'Rettangoli Naif $\mathcal{O}(h)$');
ax.plot( OrdiniDivisione, errRettangoli,     marker="x", linestyle=":", label=r'Rettangoli $\mathcal{O}(h^2)$');
ax.plot( OrdiniDivisione, errTrapezi,        marker="x", linestyle=":", label=r'Trapezi $\mathcal{O}(h^2)$');
ax.plot( OrdiniDivisione, errSimpson,        marker="x", linestyle=":", label=r'Simpson $\mathcal{O}(h^4)$');
sg.make_fine(ax);

plt.show();
