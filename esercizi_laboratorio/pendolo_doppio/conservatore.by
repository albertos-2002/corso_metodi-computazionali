import numpy as np
from scipy.constants import g as GRAVITA

import parameter_setter

class Conservatore{

	def __init__(self, classeParametri = None){
		self.classPar = classeParametri;

		self.coordinateAngolo1 = [];
		self.coordinateAngolo2 = [];
		self.velocitaAngolari1 = [];
		self.velocitaAngolari2 = [];
		
		self.coordinateTemporali = [];

		self.cartesianoX1 = [];
		self.cartesianoY1 = [];
		self.cartesianoX2 = [];
		self.cartesianoY2 = [];

		self.energiaCinetica = [];
		self.energiaPotenziale = [];
		self.energiaTotale = [];
	}

	def appendCooedinateGeneralizzate(self, coord = None){

		self.coordinateAngolo1.append( coord[0] );
		self.coordinateAngolo2.append( coord[1] );
		self.velocitaAngolari1.append( coord[2] );
		self.velocitaAngolari2.append( coord[3] );
	}

	def appendTime(self, timeItem = None){
		self.coordinateTemporali.append(timeItem);	
	}

	def cartesianatore(){

		length = len(self.coordinateTemporali);

		for i in range(length){

			x1 = self.classPar.LUNGHEZZA_ASTA_1 *  np.sin( self.coordinateAngolo1[i] );
			y1 = - self.classPar.LUNGHEZZA_ASTA_1 * np.cos( self.coordinateAngolo1[i] );

			x2 = self.classPar.LUNGHEZZA_ASTA_2 * np.sin( self.coordinateAngolo2[i] );
			y2 = - self.classPar.LUNGHEZZA_ASTA_2 * np.cos( self.coordinateAngolo2[i] );		

			self.cartesianoX1.append(x1);
			self.cartesianoY1.append(y1);
			self.cartesianoX2.append(x1+x2);
			self.cartesianoY2.append(y1+y2);
		}
		
	}

#	def energiatore(){}
	
}#endclass
